// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/goal.dart';
import 'models/transaction_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7942291714517350585),
      name: 'GoalModel',
      lastPropertyId: const IdUid(5, 1745586917106841620),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5772367034912775470),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7673169609815322491),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4945976940999586299),
            name: 'goalAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1094044657349742824),
            name: 'collectedAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1745586917106841620),
            name: 'isFinished',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6701883210669082914),
      name: 'TransactionModel',
      lastPropertyId: const IdUid(8, 3200511153597468063),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 718125050243663303),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8502857634485860928),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3293204826576456140),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3979541094211847994),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5928942263490249855),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4860043557034816361),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5677795269952841157),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3200511153597468063),
            name: 'expenseCategory',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6701883210669082914),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    GoalModel: EntityDefinition<GoalModel>(
        model: _entities[0],
        toOneRelations: (GoalModel object) => [],
        toManyRelations: (GoalModel object) => {},
        getId: (GoalModel object) => object.id,
        setId: (GoalModel object, int id) {
          object.id = id;
        },
        objectToFB: (GoalModel object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.goalAmount);
          fbb.addFloat64(3, object.collectedAmount);
          fbb.addBool(4, object.isFinished);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GoalModel(
              goalAmount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              collectedAmount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isFinished: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    TransactionModel: EntityDefinition<TransactionModel>(
        model: _entities[1],
        toOneRelations: (TransactionModel object) => [],
        toManyRelations: (TransactionModel object) => {},
        getId: (TransactionModel object) => object.id,
        setId: (TransactionModel object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final typeOffset = fbb.writeString(object.type);
          final photoOffset =
              object.photo == null ? null : fbb.writeString(object.photo!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final expenseCategoryOffset = object.expenseCategory == null
              ? null
              : fbb.writeString(object.expenseCategory!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, photoOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addOffset(7, expenseCategoryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TransactionModel(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              amount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              expenseCategory: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [GoalModel] entity fields to define ObjectBox queries.
class GoalModel_ {
  /// see [GoalModel.id]
  static final id = QueryIntegerProperty<GoalModel>(_entities[0].properties[0]);

  /// see [GoalModel.description]
  static final description =
      QueryStringProperty<GoalModel>(_entities[0].properties[1]);

  /// see [GoalModel.goalAmount]
  static final goalAmount =
      QueryDoubleProperty<GoalModel>(_entities[0].properties[2]);

  /// see [GoalModel.collectedAmount]
  static final collectedAmount =
      QueryDoubleProperty<GoalModel>(_entities[0].properties[3]);

  /// see [GoalModel.isFinished]
  static final isFinished =
      QueryBooleanProperty<GoalModel>(_entities[0].properties[4]);
}

/// [TransactionModel] entity fields to define ObjectBox queries.
class TransactionModel_ {
  /// see [TransactionModel.id]
  static final id =
      QueryIntegerProperty<TransactionModel>(_entities[1].properties[0]);

  /// see [TransactionModel.title]
  static final title =
      QueryStringProperty<TransactionModel>(_entities[1].properties[1]);

  /// see [TransactionModel.amount]
  static final amount =
      QueryDoubleProperty<TransactionModel>(_entities[1].properties[2]);

  /// see [TransactionModel.date]
  static final date =
      QueryIntegerProperty<TransactionModel>(_entities[1].properties[3]);

  /// see [TransactionModel.type]
  static final type =
      QueryStringProperty<TransactionModel>(_entities[1].properties[4]);

  /// see [TransactionModel.photo]
  static final photo =
      QueryStringProperty<TransactionModel>(_entities[1].properties[5]);

  /// see [TransactionModel.description]
  static final description =
      QueryStringProperty<TransactionModel>(_entities[1].properties[6]);

  /// see [TransactionModel.expenseCategory]
  static final expenseCategory =
      QueryStringProperty<TransactionModel>(_entities[1].properties[7]);
}
